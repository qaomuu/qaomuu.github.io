(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{338:function(e,t,s){"use strict";s.r(t);var a=s(7),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"units-单位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#units-单位"}},[e._v("#")]),e._v(" Units 单位")]),e._v(" "),t("p",[e._v("配置大小单位，开头定义了一些基本的度量单位，只支持bytes，不支持bit，大小写不敏感。")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis configuration file example.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note that in order to read the configuration file, Redis must be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# started with the file path as first argument:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ./redis-server /path/to/redis.conf")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note on units: when memory size is needed, it is possible to specify")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# it in the usual form of 1k 5GB 4M and so forth:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1k => 1000 bytes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1kb => 1024 bytes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1m => 1000000 bytes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1mb => 1024*1024 bytes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1g => 1000000000 bytes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1gb => 1024*1024*1024 bytes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# units are case insensitive so 1GB 1Gb 1gB are all the same.")]),e._v("\n")])])]),t("h2",{attrs:{id:"includes-包含"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#includes-包含"}},[e._v("#")]),e._v(" INCLUDES 包含")]),e._v(" "),t("p",[e._v("类似jsp中的include，多实例的情况可以把公用的配置文件提取出来")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################## INCLUDES ###################################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Include one or more other config files here.  This is useful if you")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# have a standard template that goes to all Redis servers but also need")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to customize a few per-server settings.  Include files can include")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# other files, so use this wisely.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Note that option "include" won\'t be rewritten by command "CONFIG REWRITE"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# from admin or Redis Sentinel. Since Redis always uses the last processed")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# line as value of a configuration directive, you'd better put includes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# at the beginning of this file to avoid overwriting config change at runtime.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If instead you are interested in using includes to override configuration")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# options, it is better to use include as the last line.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# include /path/to/local.conf")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# include /path/to/other.conf")]),e._v("\n")])])]),t("h2",{attrs:{id:"network-网络相关配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#network-网络相关配置"}},[e._v("#")]),e._v(" NETWORK 网络相关配置")]),e._v(" "),t("h3",{attrs:{id:"bind"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bind"}},[e._v("#")]),e._v(" bind")]),e._v(" "),t("ul",[t("li",[e._v("默认情况 "),t("code",[e._v("bind=127.0.0.1")]),e._v(" 只能接受本机的访问请求")]),e._v(" "),t("li",[e._v("不写的情况下，无限制接受任何ip地址的访问")])]),e._v(" "),t("p",[e._v("生产环境要写应用服务器的地址，服务器是需要远程访问的。")]),e._v(" "),t("blockquote",[t("p",[e._v("如果开启了 "),t("code",[e._v("protected-mode")]),e._v("，那么在没有设定 "),t("code",[e._v("bind ip")]),e._v(" 且没有设密码的情况下，Redis只允许接受本机的响应")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("################################## NETWORK #####################################")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# By default, if no "bind" configuration directive is specified, Redis listens')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# for connections from all available network interfaces on the host machine.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# It is possible to listen to just one or multiple selected interfaces using")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# the "bind" configuration directive, followed by one or more IP addresses.')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Each address can be prefixed by "-", which means that redis will not fail to')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# start if the address is not available. Being not available only refers to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# addresses that does not correspond to any network interfece. Addresses that")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# are already in use will always fail, and unsupported protocols will always BE")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# silently skipped.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Examples:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# bind 192.168.1.100 10.0.0.1     # listens on two specific IPv4 addresses")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# bind 127.0.0.1 ::1              # listens on loopback IPv4 and IPv6")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# bind * -::*                     # like the default, all available interfaces")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# internet, binding to all the interfaces is dangerous and will expose the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# instance to everybody on the internet. So by default we uncomment the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# following bind directive, that will force Redis to listen only on the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# IPv4 and IPv6 (if available) loopback interface addresses (this means Redis")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# will only be able to accept client connections from the same host that it is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# running on).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# JUST COMMENT OUT THE FOLLOWING LINE.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("bind")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("127.0")]),e._v(".0.1 -::1\n")])])]),t("p",[t("img",{attrs:{src:"https://file.qaomuu.com/blog/MBvoxh0jnNKJW22kuVLeokXajXHVtD8b4AdeCt5H_O8.png",alt:"image"}})]),e._v(" "),t("h3",{attrs:{id:"protected-mode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#protected-mode"}},[e._v("#")]),e._v(" protected-mode")]),e._v(" "),t("p",[e._v("本机访问保护模式，设置no")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Protected mode is a layer of security protection, in order to avoid that")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis instances left open on the internet are accessed and exploited.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When protected mode is on and if:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1) The server is not binding explicitly to a set of addresses using the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#    "bind" directive.')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 2) No password is configured.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#\t")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The server only accepts connections from clients connecting from the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# sockets.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default protected mode is enabled. You should disable it only if")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# you are sure you want clients from other hosts to connect to Redis")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# even if no authentication is configured, nor a specific set of interfaces")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# are explicitly listed using the "bind" directive.')]),e._v("\nprotected-mode no\n")])])]),t("h3",{attrs:{id:"port"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#port"}},[e._v("#")]),e._v(" port")]),e._v(" "),t("p",[e._v("端口号，默认为6379")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Accept connections on the specified port, default is 6379 (IANA #815344).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If port 0 is specified Redis will not listen on a TCP socket.")]),e._v("\nport "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6379")]),e._v("\n")])])]),t("h3",{attrs:{id:"tcp-backlog"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-backlog"}},[e._v("#")]),e._v(" tcp-backlog")]),e._v(" "),t("p",[e._v("设置tcp的backlog，backlog其实是一个连接队列，backlog队列总和=未完成三次握手队列 + 已经完成三次握手队列。")]),e._v(" "),t("p",[t("strong",[e._v("在高并发环境下需要一个高backlog值来避免慢客户端连接问题。")])]),e._v(" "),t("blockquote",[t("p",[e._v("Linux内核会将这个值减小到 "),t("code",[e._v("/proc/sys/net/core/somaxconn")]),e._v(" 的值（128），所以需要确认增大 "),t("code",[e._v("/proc/sys/net/core/somaxconn")]),e._v(" 和 "),t("code",[e._v("/proc/sys/net/ipv4/tcp_max_syn_backlog")]),e._v(" （128）两个值来达到想要的效果。")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# TCP listen() backlog.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# In high requests-per-second environments you need a high backlog in order")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to avoid slow clients connection issues. Note that the Linux kernel")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# will silently truncate it to the value of /proc/sys/net/core/somaxconn so")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# make sure to raise both the value of somaxconn and tcp_max_syn_backlog")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# in order to get the desired effect.")]),e._v("\ntcp-backlog "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("511")]),e._v("\n")])])]),t("h3",{attrs:{id:"timeout"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#timeout"}},[e._v("#")]),e._v(" timeout")]),e._v(" "),t("p",[e._v("一个空闲的客户端维持多少秒会关闭，0表示关闭该功能。即"),t("strong",[e._v("永不关闭")]),e._v("。")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Close the connection after a client is idle for N seconds (0 to disable)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("timeout")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n")])])]),t("h3",{attrs:{id:"tcp-keepalive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-keepalive"}},[e._v("#")]),e._v(" tcp-keepalive")]),e._v(" "),t("p",[e._v("对访问客户端的一种心跳检测，每个n秒检测一次，单位为秒。")]),e._v(" "),t("p",[e._v("如果设置为0，则不会进行Keepalive检测。")]),e._v(" "),t("p",[e._v("建议设置成60。")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# TCP keepalive.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# of communication. This is useful for two reasons:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1) Detect dead peers.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 2) Force network equipment in the middle to consider the connection to be")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    alive.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On Linux, the specified value (in seconds) is the period used to send ACKs.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note that to close the connection the double of the time is needed.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On other kernels the period depends on the kernel configuration.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A reasonable value for this option is 300 seconds, which is the new")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis default starting with Redis 3.2.1.")]),e._v("\ntcp-keepalive "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("300")]),e._v("\n")])])]),t("h2",{attrs:{id:"general-通用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#general-通用"}},[e._v("#")]),e._v(" GENERAL 通用")]),e._v(" "),t("h3",{attrs:{id:"daemonize"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#daemonize"}},[e._v("#")]),e._v(" daemonize")]),e._v(" "),t("p",[e._v("是否为后台进程，设置为 yes")]),e._v(" "),t("p",[e._v("守护进程，后台启动")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default Redis does not run as a daemon. Use 'yes' if you need it.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When Redis is supervised by upstart or systemd, this parameter has no impact.")]),e._v("\ndaemonize "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("yes")]),e._v("\n")])])]),t("h3",{attrs:{id:"pidfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pidfile"}},[e._v("#")]),e._v(" pidfile")]),e._v(" "),t("p",[e._v("存放pid文件的位置，每个实例会产生一个不同的pid文件")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If a pid file is specified, Redis writes it where specified at startup")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and removes it at exit.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When the server runs non daemonized, no pid file is created if none is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# specified in the configuration. When the server is daemonized, the pid file")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# is used even if not specified, defaulting to "/var/run/redis.pid".')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Creating a pid file is best effort: if Redis is not able to create it")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# nothing bad happens, the server will start and run normally.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Note that on modern Linux systems "/run/redis.pid" is more conforming')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and should be used instead.")]),e._v("\npidfile /var/run/redis_6379.pid\n")])])]),t("h3",{attrs:{id:"loglevel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loglevel"}},[e._v("#")]),e._v(" loglevel")]),e._v(" "),t("p",[e._v("指定日志记录级别，Redis总共支持四个级别： "),t("code",[e._v("debug")]),e._v(" 、 "),t("code",[e._v("verbose")]),e._v(" 、 "),t("code",[e._v("notice")]),e._v(" 、 "),t("code",[e._v("warning")]),e._v(" ，默认为 "),t("strong",[e._v("notice")])]),e._v(" "),t("p",[e._v("四个级别根据使用阶段来选择，生产环境选择 "),t("code",[e._v("notice")]),e._v(" 或者 "),t("code",[e._v("warning")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Specify the server verbosity level.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This can be one of:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# debug (a lot of information, useful for development/testing)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# verbose (many rarely useful info, but not a mess like the debug level)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# notice (moderately verbose, what you want in production probably)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# warning (only very important / critical messages are logged)")]),e._v("\nloglevel notice\n")])])]),t("h3",{attrs:{id:"logfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#logfile"}},[e._v("#")]),e._v(" logfile")]),e._v(" "),t("p",[e._v("日志文件名称")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Specify the log file name. Also the empty string can be used to force")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Redis to log on the standard output. Note that if you use standard")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# output for logging but daemonize, logs will be sent to /dev/null")]),e._v("\nlogfile "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('""')]),e._v("\n")])])]),t("h3",{attrs:{id:"databases"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#databases"}},[e._v("#")]),e._v(" databases")]),e._v(" "),t("p",[e._v("设定库的数量 默认16，默认数据库为0，可以使用 "),t("code",[e._v("SELECT <dbid>")]),e._v(" 命令在连接上指定数据库id")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set the number of databases. The default database is DB 0, you can select")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# a different one on a per-connection basis using SELECT <dbid> where")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# dbid is a number between 0 and 'databases'-1")]),e._v("\ndatabases "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("16")]),e._v("\n")])])]),t("h2",{attrs:{id:"security-安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#security-安全"}},[e._v("#")]),e._v(" SECURITY 安全")]),e._v(" "),t("h3",{attrs:{id:"设置密码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置密码"}},[e._v("#")]),e._v(" 设置密码")]),e._v(" "),t("p",[e._v("访问密码的查看、设置和取消")]),e._v(" "),t("p",[e._v("在命令中设置密码，只是临时的。重启redis服务器，密码就还原了。")]),e._v(" "),t("p",[e._v("永久设置，需要再配置文件中进行设置。")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# IMPORTANT NOTE: starting with Redis 6 "requirepass" is just a compatibility')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# layer on top of the new ACL system. The option effect will be just setting")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the password for the default user. Clients will still authenticate using")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# AUTH <password> as usually, or more explicitly with AUTH default <password>")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# if they follow the new protocol: both will work.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The requirepass is not compatable with aclfile option and the ACL LOAD")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# command, these will cause requirepass to be ignored.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# requirepass foobared")]),e._v("\n")])])]),t("p",[e._v("临时设置密码：")]),e._v(" "),t("div",{staticClass:"language-Plain Text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plain"}},[t("code",[e._v('127.0.0.1:6379> config get requirepass\n1) "requirepass"\n2) ""\n127.0.0.1:6379> config set requirepass "123456"\nOK\n127.0.0.1:6379> config get requirepass\n1) "requirepass"\n2) "123456"\n')])])]),t("h2",{attrs:{id:"limits-限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#limits-限制"}},[e._v("#")]),e._v(" LIMITS 限制")]),e._v(" "),t("h3",{attrs:{id:"maxclients"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#maxclients"}},[e._v("#")]),e._v(" maxclients")]),e._v(" "),t("p",[e._v("设置redis同时可以与多少个客户端进行连接，默认情况下为10000个客户端。")]),e._v(" "),t("p",[e._v("如果达到了此限制，redis则会拒绝新的连接请求，并且向这些连接请求方发出“"),t("code",[e._v("max number of clients reached")]),e._v("”以作回应。")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set the max number of connected clients at the same time. By default")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# this limit is set to 10000 clients, however if the Redis server is not")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# able to configure the process file limit to allow for the specified limit")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the max number of allowed clients is set to the current file limit")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# minus 32 (as Redis reserves a few file descriptors for internal uses).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Once the limit is reached Redis will close all the new connections sending")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# an error 'max number of clients reached'.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# IMPORTANT: When Redis Cluster is used, the max number of connections is also")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# shared with the cluster bus: every node in the cluster will use two")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# connections, one incoming and another outgoing. It is important to size the")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# limit accordingly in case of very large clusters.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# maxclients 10000")]),e._v("\n")])])]),t("h3",{attrs:{id:"maxmemory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#maxmemory"}},[e._v("#")]),e._v(" maxmemory")]),e._v(" "),t("p",[e._v("设置redis可以使用的内存量，一旦到达内存使用上限，redis将会试图移除内部数据，移除规则可以通过 "),t("code",[e._v("maxmemory-policy")]),e._v(" 来指定。")]),e._v(" "),t("p",[t("strong",[e._v("建议设置，否则可能内存占满，造成服务器宕机。")])]),e._v(" "),t("p",[e._v("如果redis无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，那么redis则会针对那些需要申请内存的指令返回错误信息，比如SET、LPUSH等。")]),e._v(" "),t("p",[e._v("但是对于无内存申请的指令，仍然会正常响应，比如GET等。如果redis是主redis（说明redis有从redis），那么在设置内存使用上限时，需要在系统中留出一些内存空间给同步队列缓存，只有在设置的是“不移除”的情况下，才不用考虑这个因素。")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set a memory usage limit to the specified amount of bytes.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When the memory limit is reached Redis will try to remove keys")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# according to the eviction policy selected (see maxmemory-policy).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If Redis can't remove keys according to the policy, or if the policy is")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# set to 'noeviction', Redis will start to reply with errors to commands")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# that would use more memory, like SET, LPUSH, and so on, and will continue")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to reply to read-only commands like GET.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This option is usually useful when using Redis as an LRU or LFU cache, or to")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# set a hard memory limit for an instance (using the 'noeviction' policy).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# WARNING: If you have replicas attached to an instance with maxmemory on,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# the size of the output buffers needed to feed the replicas are subtracted")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# from the used memory count, so that network problems / resyncs will")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# not trigger a loop where keys are evicted, and in turn the output")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# buffer of replicas is full with DELs of keys evicted triggering the deletion")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# of more keys, and so forth until the database is completely emptied.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# In short... if you have replicas attached it is suggested that you set a lower")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# limit for maxmemory so that there is some free RAM on the system for replica")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# output buffers (but this is not needed if the policy is 'noeviction').")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# maxmemory <bytes>")]),e._v("\n")])])]),t("h3",{attrs:{id:"maxmemory-policy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#maxmemory-policy"}},[e._v("#")]),e._v(" maxmemory-policy")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("volatile-lru")]),e._v(" ：使用LRU算法移除key，只对设置了过期时间的键；（最近最少使用）")]),e._v(" "),t("li",[t("code",[e._v("allkeys-lru")]),e._v(" ：在所有集合key中，使用LRU算法移除key")]),e._v(" "),t("li",[t("code",[e._v("volatile-random")]),e._v(" ：在过期集合中移除随机的key，只对设置了过期时间的键")]),e._v(" "),t("li",[t("code",[e._v("allkeys-random")]),e._v(" ：在所有集合key中，移除随机的key")]),e._v(" "),t("li",[t("code",[e._v("volatile-ttl")]),e._v(" ：移除那些TTL值最小的key，即那些最近要过期的key")]),e._v(" "),t("li",[t("code",[e._v("noeviction")]),e._v(" ：不进行移除，针对写操作，只是返回错误信息")])]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# MAXMEMORY POLICY: how Redis will select what to remove when maxmemory")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# is reached. You can select one from the following behaviors:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# volatile-lru -> Evict using approximated LRU, only keys with an expire set.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# allkeys-lru -> Evict any key using approximated LRU.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# volatile-lfu -> Evict using approximated LFU, only keys with an expire set.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# allkeys-lfu -> Evict any key using approximated LFU.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# volatile-random -> Remove a random key having an expire set.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# allkeys-random -> Remove a random key, any key.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# volatile-ttl -> Remove the key with the nearest expire time (minor TTL)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# noeviction -> Don't evict anything, just return an error on write operations.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# LRU means Least Recently Used")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# LFU means Least Frequently Used")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Both LRU, LFU and volatile-ttl are implemented using approximated")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# randomized algorithms.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note: with any of the above policies, when there are no suitable keys for")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# eviction, Redis will return an error on write operations that require")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# more memory. These are usually commands that create new keys, add data or")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# modify existing keys. A few examples are: SET, INCR, HSET, LPUSH, SUNIONSTORE,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# SORT (due to the STORE argument), and EXEC (if the transaction includes any")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# command that requires memory).")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The default is:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# maxmemory-policy noeviction")]),e._v("\n")])])]),t("h3",{attrs:{id:"maxmemory-samples"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#maxmemory-samples"}},[e._v("#")]),e._v(" maxmemory-samples")]),e._v(" "),t("p",[e._v("设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以可以设置样本的大小，redis默认会检查这么多个key并选择其中LRU的那个。")]),e._v(" "),t("p",[e._v("一般设置3到7的数字，数值越小样本越不准确，但性能消耗越小。")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# algorithms (in order to save memory), so you can tune it for speed or")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# accuracy. By default Redis will check five keys and pick the one that was")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# used least recently, you can change the sample size using the following")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# configuration directive.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The default of 5 produces good enough results. 10 Approximates very closely")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# true LRU but costs more CPU. 3 is faster but not very accurate.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# maxmemory-samples 5")]),e._v("\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);