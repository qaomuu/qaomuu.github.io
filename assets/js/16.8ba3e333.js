(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{336:function(v,_,t){"use strict";t.r(_);var a=t(7),r=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("微服务间通讯有同步和异步两种方式：")]),v._v(" "),_("ul",[_("li",[v._v("同步通讯：就像打电话，需要实时响应。")]),v._v(" "),_("li",[v._v("异步通讯：就像发邮件，不需要马上回复。")])]),v._v(" "),_("h2",{attrs:{id:"同步通讯"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#同步通讯"}},[v._v("#")]),v._v(" 同步通讯")]),v._v(" "),_("p",[v._v("同步调用的优点：")]),v._v(" "),_("p",[v._v("时效性较强，可以立即得到结果")]),v._v(" "),_("p",[v._v("Feign调用就属于同步方式，虽然调用可以实时得到结果，但存在下面的问题：")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("耦合度高：")]),v._v(" 每次加入新需求，都需要修改原来的代码")]),v._v(" "),_("li",[_("strong",[v._v("性能下降：")]),v._v(" 调用者需要等待服务提供者响应，如果调用链过长则响应时间等于每次调用时间之和。")]),v._v(" "),_("li",[v._v("资源浪费：调用链中的每个服务在响应过程中，不能释放请求占用的资源，高并发场景下会极度浪费系统资源。")]),v._v(" "),_("li",[v._v("级联失败：如果服务提供者出现问题，所有调用方都会跟着出问题，可能会导致整个微服务群故障")])]),v._v(" "),_("h2",{attrs:{id:"异步通讯"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#异步通讯"}},[v._v("#")]),v._v(" 异步通讯")]),v._v(" "),_("p",[v._v("异步调用则可以避免上述问题：")]),v._v(" "),_("p",[v._v("以购买商品为例，用户支付后需要调用订单服务完成订单状态修改，调用物流服务，从仓库分配响应的库存并准备发货。")]),v._v(" "),_("p",[v._v("在事件模式中，支付服务是事件发布者（publisher），在支付完成后只需要发布一个支付成功的事件（event），事件中带上订单id。")]),v._v(" "),_("p",[v._v("订单服务和物流服务是事件订阅者（Consumer），订阅支付成功的事件，监听到事件后完成自己业务即可。")]),v._v(" "),_("p",[v._v("为了解除事件发布者与订阅者之间的耦合，两者并不是直接通信，而是有一个中间人（Broker）。发布者发布事件到Broker，不关心谁来订阅事件。订阅者从Broker订阅事件，不关心谁发来的消息。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://file.qaomuu.com/blog/sQqu0LYIcMtYzpcSy6SGXH6azjBTogjzWj9AJg_1ALw.png",alt:"image"}})]),v._v(" "),_("p",[v._v("Broker 是一个像数据总线一样的东西，所有的服务要接收数据和发送数据都发到这个总线上，这个总线就像协议一样，让服务间的通讯变得标准和可控。")]),v._v(" "),_("p",[v._v("异步的优点：")]),v._v(" "),_("ul",[_("li",[v._v("吞吐量提升：无需等待订阅者处理完成，响应更快速")]),v._v(" "),_("li",[v._v("故障隔离：服务没有直接调用，不存在级联失败问题")]),v._v(" "),_("li",[v._v("调用间没有阻塞，不会造成无效的资源占用")]),v._v(" "),_("li",[v._v("耦合度极低，每个服务都可以灵活插拔，可替换")]),v._v(" "),_("li",[v._v("流量削峰：不管发布事件的流量波动多大，都由Broker接收，订阅者可以按照自己的速度去处理事件")])]),v._v(" "),_("p",[v._v("缺点：")]),v._v(" "),_("ul",[_("li",[v._v("架构复杂了，业务没有明显的流程线，不好管理")]),v._v(" "),_("li",[v._v("需要依赖于Broker的可靠、安全、性能")])]),v._v(" "),_("h2",{attrs:{id:"什么是mq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是mq"}},[v._v("#")]),v._v(" 什么是MQ")]),v._v(" "),_("p",[v._v("MQ(message queue)，从字面意思上看，本质是个队列，FIFO 先入先出，只不过队列中存放的内容是 message 而已，还是一种跨进程的通信机制，用于上下游传递消息。在互联网架构中，MQ 是一种非常常 见的上下游「逻辑解耦 + 物理解耦」的消息通信服务。使用了 MQ 之后，消息发送上游只需要依赖 MQ，不用依赖其他服务。")]),v._v(" "),_("h2",{attrs:{id:"为什么要用mq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用mq"}},[v._v("#")]),v._v(" 为什么要用MQ")]),v._v(" "),_("ol",[_("li",[v._v("流量消峰")])]),v._v(" "),_("p",[v._v("举个例子，如果订单系统最多能处理一万次订单，这个处理能力应付正常时段的下单时绰绰有余，正常时段我们下单一秒后就能返回结果。但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。使用消息队列做缓冲，我们可以取消这个限制，把一秒内下的订单分 散成一段时间来处理，这时有些用户可能在下单十几秒后才能收到下单成功的操作，但是比不能下单的体验要好。")]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[v._v("应用解耦")])]),v._v(" "),_("p",[v._v("以电商应用为例，应用中有订单系统、库存系统、物流系统、支付系统。用户创建订单后，如果耦合调用库存系统、物流系统、支付系统，任何一个子系统出了故障，都会造成下单操作异常。当转变成基于消息队列的方式后，系统间调用的问题会减少很多，比如物流系统因为发生故障，需要几分钟来修复。在这几分钟的时间里，物流系统要处理的内存被缓存在消息队列中，用户的下单操作可以正常完成。当物流系统恢复后，继续处理订单信息即可，中单用户感受不到物流系统的故障，提升系统的可用性。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://file.qaomuu.com/blog/3jCPtUTVGup1A7cUdUbp2erEorb21wVHusJVMAGotx4.webp",alt:"image"}})]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[v._v("异步处理")])]),v._v(" "),_("p",[v._v("有些服务间调用是异步的，例如 A 调用 B，B 需要花费很长时间执行，但是 A 需要知道 B 什么时候可以执行完，以前一般有两种方式，A 过一段时间去调用 B 的查询 api 查询。或者 A 提供一个 callback api，B 执行完之后调用 api 通知 A 服务。这两种方式都不是很优雅，使用消息总线，可以很方便解决这个问题，A 调用 B 服务后，只需要监听 B 处理完成的消息，当 B 处理完成后，会发送一条消息给 MQ，MQ 会将此消息转发给 A 服务。这样 A 服务既不用循环调用 B 的查询 api，也不用提供 callback api。同样B 服务也不用做这些操作。A 服务还能及时的得到异步处理成功的消息。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://file.qaomuu.com/blog/XLLsiZ8IEOecPO3-UxKm2FxWZOjjt6kw3ytBrdIMFsQ.png",alt:"image"}})]),v._v(" "),_("h2",{attrs:{id:"mq的分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mq的分类"}},[v._v("#")]),v._v(" MQ的分类")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[_("strong",[v._v("RabbitMQ")])]),v._v(" "),_("th",[_("strong",[v._v("ActiveMQ")])]),v._v(" "),_("th",[_("strong",[v._v("RocketMQ")])]),v._v(" "),_("th",[_("strong",[v._v("Kafka")])])])]),v._v(" "),_("tbody",[_("tr",[_("td",[_("strong",[v._v("公司/社区")])]),v._v(" "),_("td",[v._v("Rabbit")]),v._v(" "),_("td",[v._v("Apache")]),v._v(" "),_("td",[v._v("阿里")]),v._v(" "),_("td",[v._v("Apache")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("开发语言")])]),v._v(" "),_("td",[v._v("Erlang")]),v._v(" "),_("td",[v._v("Java")]),v._v(" "),_("td",[v._v("Java")]),v._v(" "),_("td",[v._v("Scala&Java")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("协议支持")])]),v._v(" "),_("td",[v._v("AMQP，XMPP，SMTP，STOMP")]),v._v(" "),_("td",[v._v("OpenWire，STOMP，REST，XMPP，AMQP")]),v._v(" "),_("td",[v._v("自定义协议")]),v._v(" "),_("td",[v._v("自定义协议")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("可用性")])]),v._v(" "),_("td",[v._v("高")]),v._v(" "),_("td",[v._v("一般")]),v._v(" "),_("td",[v._v("高")]),v._v(" "),_("td",[v._v("高")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("单机吞吐量")])]),v._v(" "),_("td",[v._v("一般")]),v._v(" "),_("td",[v._v("差")]),v._v(" "),_("td",[v._v("高")]),v._v(" "),_("td",[v._v("非常高")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("消息延迟")])]),v._v(" "),_("td",[v._v("微秒级")]),v._v(" "),_("td",[v._v("毫秒级")]),v._v(" "),_("td",[v._v("毫秒级")]),v._v(" "),_("td",[v._v("毫秒以内")])]),v._v(" "),_("tr",[_("td",[_("strong",[v._v("消息可靠性")])]),v._v(" "),_("td",[v._v("高")]),v._v(" "),_("td",[v._v("一般")]),v._v(" "),_("td",[v._v("高")]),v._v(" "),_("td",[v._v("一般")])])])]),v._v(" "),_("h3",{attrs:{id:"activemq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#activemq"}},[v._v("#")]),v._v(" ActiveMQ")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("优点：")]),v._v(" 单机吞吐量万级，时效性 ms 级，可用性高，基于主从架构实现高可用性，消息可靠性较 低的概率丢失数据。")]),v._v(" "),_("li",[_("strong",[v._v("缺点：")]),v._v(" 官方社区现在对 ActiveMQ 5.x "),_("strong",[v._v("维护越来越少，高吞吐量场景较少使用")]),v._v("。")])]),v._v(" "),_("h3",{attrs:{id:"kafka"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka"}},[v._v("#")]),v._v(" Kafka")]),v._v(" "),_("p",[v._v("大数据的杀手锏，谈到大数据领域内的消息传输，则绕不开 Kafka，这款"),_("strong",[v._v("为大数据而生")]),v._v("的消息中间件，以其百万级 TPS 的吞吐量名声大噪，迅速成为大数据领域的宠儿，在数据采集、传输、存储的过程中发挥着举足轻重的作用。目前已经被 LinkedIn，Uber，Twitter，Netflix 等大公司所采纳。")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("优点："),_("strong",[v._v("性能卓越，单机写入 TPS 约在百万条/秒，最大的优点，就是")]),v._v("吞吐量高")]),v._v("。时效性 ms 级可用性非常高，kafka 是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用,消费者采用 Pull 方式获取消息，消息有序，通过控制能够保证所有消息被消费且仅被消费一次；有优秀的第三方Kafka Web 管理界面 Kafka-Manager；在日志领域比较成熟，被多家公司和多个开源项目使用；功能支持：功能 较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及"),_("strong",[v._v("日志采集")]),v._v("被大规模使用。")]),v._v(" "),_("li",[_("strong",[v._v("缺点：")]),v._v(" Kafka 单机超过 64 个队列/分区，Load 会发生明显的飙高现象，队列越多，load 越高，发送消息响应时间变长，使用短轮询方式，实时性取决于轮询间隔时间，消费失败不支持重试；支持消息顺序，但是一台代理宕机后，就会产生消息乱序，"),_("strong",[v._v("社区更新较慢")]),v._v("。")])]),v._v(" "),_("h3",{attrs:{id:"rocketmq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq"}},[v._v("#")]),v._v(" RocketMQ")]),v._v(" "),_("p",[v._v("RocketMQ 出自阿里巴巴的开源产品，用 Java 语言实现，在设计时参考了 Kafka，并做出了自己的一些改进。被阿里巴巴广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理，binglog 分发等场景。")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("优点：")]),v._v(" "),_("strong",[v._v("单机吞吐量十万级")]),v._v("，可用性非常高，分布式架构，"),_("strong",[v._v("消息可以做到 0 丢失")]),v._v("，MQ 功能较为完善，还是分布式的，扩展性好，"),_("strong",[v._v("支持 10 亿级别的消息堆积")]),v._v("，不会因为堆积导致性能下降，源码是 java 我们可以自己阅读源码，定制自己公司的 MQ。")]),v._v(" "),_("li",[_("strong",[v._v("缺点：")]),v._v(" "),_("strong",[v._v("支持的客户端语言不多")]),v._v("，目前是 java 及 c++，其中 c++ 不成熟；社区活跃度一般,没有在 MQ 核心中去实现 JMS 等接口，有些系统要迁移需要修改大量代码。")])]),v._v(" "),_("h3",{attrs:{id:"rabbitmq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq"}},[v._v("#")]),v._v(" RabbitMQ")]),v._v(" "),_("p",[v._v("2007 年发布，是一个在AMQP(高级消息队列协议)基础上完成的，可复用的企业消息系统，是当前最主流的消息中间件之一。")]),v._v(" "),_("p",[v._v("官网："),_("a",{attrs:{href:"https://www.rabbitmq.com/",target:"_blank",rel:"noopener noreferrer"}},[v._v("https://www.rabbitmq.com"),_("OutboundLink")],1)]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("优点："),_("strong",[v._v("由于 erlang 语言的")]),v._v("高并发特性")]),v._v("，性能较好；吞吐量到万级，MQ 功能比较完备,健壮、稳定、易用、跨平台、"),_("strong",[v._v("支持多种语言")]),v._v(" 如：Python、Ruby、.NET、Java、JMS、C、PHP、ActionScript、XMPP、STOMP 等，支持 AJAX 文档齐全；开源提供的管理界面非常棒，用起来很好用，"),_("strong",[v._v("社区活跃度高")]),v._v("；更新频率相当高。")]),v._v(" "),_("li",[_("strong",[v._v("缺点：")]),v._v(" 商业版需要收费，学习成本较高。")])]),v._v(" "),_("h2",{attrs:{id:"mq的选择"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mq的选择"}},[v._v("#")]),v._v(" MQ的选择")]),v._v(" "),_("ul",[_("li",[v._v("追求可用性：Kafka、 RocketMQ 、RabbitMQ")]),v._v(" "),_("li",[v._v("追求可靠性：RabbitMQ、RocketMQ")]),v._v(" "),_("li",[v._v("追求吞吐能力：RocketMQ、Kafka")]),v._v(" "),_("li",[v._v("追求消息低延迟：RabbitMQ、Kafka")])]),v._v(" "),_("h3",{attrs:{id:"kafka-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka-2"}},[v._v("#")]),v._v(" Kafka")]),v._v(" "),_("p",[v._v("Kafka 主要特点是基于 Pull 的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输，适合产生"),_("strong",[v._v("大量数据")]),v._v("的互联网服务的数据收集业务。"),_("strong",[v._v("大型公司")]),v._v("建议可以选用，如果有日志采集功能，肯定是首选 kafka 了。")]),v._v(" "),_("h3",{attrs:{id:"rocketmq-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq-2"}},[v._v("#")]),v._v(" RocketMQ")]),v._v(" "),_("p",[v._v("天生为"),_("strong",[v._v("金融互联网领域")]),v._v("而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款，以及业务削峰，在大量交易涌入时，后端可能无法及时处理的情况。RoketMQ 在稳定性上可能更值得信赖，这些业务场景在阿里双 11 已经经历了多次考验，如果你的业务有上述并发场景，建议可以选择 RocketMQ。")]),v._v(" "),_("h3",{attrs:{id:"rabbitmq-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq-2"}},[v._v("#")]),v._v(" RabbitMQ")]),v._v(" "),_("p",[v._v("结合 erlang 语言本身的并发优势，性能好"),_("strong",[v._v("时效性微秒级")]),v._v("，社区活跃度也比较高，管理界面用起来十分 方便，如果你的"),_("strong",[v._v("数据量没有那么大")]),v._v("，中小型公司优先选择功能比较完备的 RabbitMQ。")])])}),[],!1,null,null,null);_.default=r.exports}}]);